#!/usr/bin/env bash
# apo: Fuzzy switch to any workspace on the currently focused monitor using fzf, with apoon-cmd dispatch (a|c|e|j|p)

# If called with a single argument (a|c|e|j|p), immediately dispatch to the respective apoon-* script
if [[ $# -eq 1 && "$1" =~ ^[acejp]$ ]]; then
  case "$1" in
    a) exec apoon-add ;;
    c) exec apoon-cycle ;;
    e) exec apoon-edit ;;
    j) exec apoon-jump ;;
    p) exec apoon-pick ;;
  esac
  exit 0
fi

# 1) Get focused monitorâ€™s ID (for use in commands)
monitor_id=$(aerospace list-monitors --focused --json 2>&1 | jq -r '.[0]."monitor-id"')

# 2) Get all workspaces for the focused monitor
ws_json=$(aerospace list-workspaces --monitor "$monitor_id" --json 2>&1)

# 3) Build a list of workspace entries with a single preferred window title for each
fzf_entries=()
workspaces=($(printf '%s\n' "$ws_json" | jq -r '.[].workspace'))
preview_data=$(mktemp)
for ws_name in "${workspaces[@]}"; do
  windows_json=$(aerospace list-windows --workspace "$ws_name" --json 2>/dev/null)
  echo -e "$ws_name\t$windows_json" >> "$preview_data"
  preferred_title=$(printf '%s\n' "$windows_json" | jq -r '.[] | select(."app-name"=="Code") | "[Code] " + .["window-title"]' | head -n1)
  [ -z "$preferred_title" ] && preferred_title=$(printf '%s\n' "$windows_json" | jq -r '.[] | select(."app-name"=="kitty") | "[kitty] " + .["window-title"]' | head -n1)
  [ -z "$preferred_title" ] && preferred_title=$(printf '%s\n' "$windows_json" | jq -r '.[] | select(."app-name"=="Google Chrome") | "[Google Chrome] " + .["window-title"]' | head -n1)
  [ -z "$preferred_title" ] && preferred_title=$(printf '%s\n' "$windows_json" | jq -r '.[] | "[" + .["app-name"] + "] " + .["window-title"]' | head -n1)
  [ -z "$preferred_title" ] && preferred_title="(empty)"
  entry="$ws_name: $preferred_title"
  fzf_entries+=("$entry")
done

# 4) Use fzf to pick a workspace, showing all window titles in the preview
selected=$(printf '%s\n' "${fzf_entries[@]}" | \
  fzf --prompt="> " \
      --preview='python3 $HOME/.config/bin/ao_preview.py "{}"' \
      --preview-window=up:10:wrap)

rm -f "$preview_data"

if [[ -z "$selected" ]]; then
  echo "No workspace selected. Exiting."
  exit 0
fi

# 5) Extract workspace name from selection
ws_name=$(echo "$selected" | awk -F: '{print $1}')

# 6) After picking, allow for a single-key command (a|c|e|j|p) to run the respective apoon-* script
read -rsn1 -p "apo: Press a|c|e|j|p for apoon-add/cycle/edit/jump/pick, or Enter to switch: " apo_key
echo
if [[ "$apo_key" =~ ^[acejp]$ ]]; then
  case "$apo_key" in
    a) "$HOME/.config/bin/apoon-add" ;;
    c) "$HOME/.config/bin/apoon-cycle" ;;
    e) "$HOME/.config/bin/apoon-edit" ;;
    j) "$HOME/.config/bin/apoon-jump" ;;
    p) "$HOME/.config/bin/apoon-pick" ;;
  esac
  exit 0
fi

# 7) Move the selected workspace to the focused monitor and focus it
aerospace move-workspace-to-monitor --workspace "$ws_name" "$monitor_id"
aerospace workspace "$ws_name"
