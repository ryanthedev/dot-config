#!/usr/bin/env python3
"""
apoon-add (Python version)
Adds the currently focused workspace to the session file for the focused monitor, ensuring no duplicates and only valid workspaces are kept.
"""
import subprocess
import os
import sys
from pathlib import Path
import json

def debug(msg):
    print(f"[DEBUG] {msg}")

def run(cmd):
    debug(f"Running: {' '.join(cmd)}")
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode != 0:
        debug(f"Error: {result.stderr.strip()}")
        return None
    return result.stdout.strip()

def get_focused_monitor_id():
    out = run(["aerospace", "list-monitors", "--focused", "--json"])
    if not out:
        sys.exit("Could not get focused monitor.")
    try:
        return json.loads(out)[0]["monitor-id"]
    except Exception as e:
        sys.exit(f"Error parsing monitor id: {e}")

def get_monitor_workspaces(monitor_id):
    out = run(["aerospace", "list-workspaces", "--monitor", str(monitor_id), "--json"])
    if not out:
        return []
    try:
        return [ws["workspace"] for ws in json.loads(out)]
    except Exception as e:
        sys.exit(f"Error parsing workspaces: {e}")

def get_focused_workspace():
    out = run(["aerospace", "list-workspaces", "--focused", "--json"])
    if not out:
        return None
    try:
        return json.loads(out)[0]["workspace"]
    except Exception as e:
        sys.exit(f"Error parsing focused workspace: {e}")

def main():
    monitor_id = get_focused_monitor_id()
    debug(f"monitor_id: {monitor_id}")
    workspaces = get_monitor_workspaces(monitor_id)
    debug(f"workspaces: {workspaces}")

    apoon_dir = Path.home() / ".apoon"
    apoon_dir.mkdir(exist_ok=True)
    session_file = apoon_dir / f"{monitor_id}_apoon_session"
    debug(f"SESSION_FILE: {session_file}")

    # Clean up session file: keep only valid workspaces
    valid_set = set(workspaces)
    if session_file.exists():
        with session_file.open() as f:
            lines = [line.strip() for line in f if line.strip()]
        cleaned = [ws for ws in lines if ws in valid_set]
        with session_file.open("w") as f:
            for ws in cleaned:
                f.write(ws + "\n")
        debug(f"Cleaned up session file: {session_file}")

    focused_ws = get_focused_workspace()
    debug(f"focused_ws: {focused_ws}")
    if not focused_ws:
        sys.exit("No focused workspace found.")

    # Only add if not present and not empty
    with session_file.open() as f:
        session_lines = [line.strip() for line in f if line.strip()]
    if focused_ws not in session_lines:
        with session_file.open("a") as f:
            f.write(focused_ws + "\n")
        debug(f"Added: {focused_ws}")
    else:
        debug(f"Not adding: {focused_ws} (already present)")

if __name__ == "__main__":
    main()
